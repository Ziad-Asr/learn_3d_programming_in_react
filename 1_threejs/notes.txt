- THREE => Has 4 main elements ( Scene - Objects (mech) - Camera - Renderer )

-----------------------------------------------------

- I am in a room taking a picture of my bed (known that there are other objects in my room but they are not in the fram of the camera).
  {
    1) *** Scene => The place where the action happens ( Bedroom )
    2) Objects => Bed - All other objects in the room (not in the picture)
    3) Camera => My camera
    4) *** Renderer => Is the process of taking the picture and displaying it on the ( Canvas )
  }

*** The objects in the room but not in the camera vesion are also in the scene

-----------------------------------------------------

Camera types :=> ( perspective camera )
#############

1- perspective camera => ( field of view (FOV) - aspect ratio (w/h) - near - far )

                          1) field of view (FOV) => The angle of the camera (opens with 60 degrees)
                          2) aspect ratio (w/h) => This camera view sees a plane that has a width and height, 
                                                   and this is the ratio between width and heght.
                          3) Near => The beginning of the vesion ramge
                          4) far => The end of the vision rang

                          (If I want to see any mesh in the picture it must be between the beginning and ending og vission {near - far} )
                           *** (FOV increase => Far decrease , and vice versa) {When i am trying to see fav thing I close my eyes alittle}
                           *** (لما بصغر الزاوية بشوف مكونات اكتر بس في نطاق قليل من الصورة عشان بيبقي في مشاحة كبيرة انا شايفها, بس لو صغرت الزاوية هشوف مكونات اقل بس هتبقي واخدة مساحة كبير من الصورة اي نطاق اكبر من الصورة)
                           - (Distoryion => Means that when I zoom in the objects in the middle of the fram seems to be expanded and the other objects seems the same)
                           - ( near (default = 1) - far (default = 2000) )


- When I make the camera for the first time it will be in the center of the scene, 
  and the same for the object, 
  then the camera will be inside the object so I can't see it, 
  so I should like move the camera on any axis to see objects in the center well.
{{{ Solution => camera.position.z = 3 }}}

-----------------------------------------------------

Object3D :-
###########

- All some of objects (mesh, camera) {not not renderer} in this library inherits (oop) thier propertis from (Object3D) object, means that these objects have access to it's properties and methods.
- ( Object3D ) properties => ( position - scale - rotation - ... )
* Rotaion (Object3D property) => 1) {Imagine the stick inside the cube to imagine the rotaion (video 3.2 - min 10)}
                                 2) -ve => clockwise , +v => Anticlockwise
                                 3) in (Euiler form) => ( 1.57 = 90 deg = 0.5 * Math.PI , 3.14 = 180 deg = Math.PI , 4.71 = 270 deg = 1.5 * Math.PI, 6.28 = 360 deg = 2 * Math.PI )

-------------------------------------------------------

Group :-
########

(It is like a box for meshes that i can controll all of it's meshes at the same time from positionning too rotation to anything else)
const group = new THREE.Scene();
group.add(mesh, mesh2)
scene.add(group)
group.position.x = 1;

// AxesHelper
const axesHelper = new THREE.AxesHelper();
scene.add(axesHelper)

-------------------------------------------------------

Animation (Not the best solution) :-
####################################

const animate = () => {
  mesh.rotation.x += 0.01;
  renderer.render(scene, camera); // Draw what inside the camera (the scene captured)
  window.requestAnimationFrame(animate);
};

// That based on frams per second (FPS)
// Display the animate function on each frame
// There are different fps for each device (60frams/sec, 120fram/sec, ...)
// I should not depend on the fps of each device, I should choose like a statis variable for all devices
// So the best solution is to use the ((( clock class ))) in three.js library.
  

-------------------------------------------------------

// ######################
// ### Good animation ###
// ######################

// clock class
const clock = new THREE.Clock();

// Animations
const animate = () => {
  // Elapsed time => The number of seconds past since a user entered the websire
  const elapsedtime = clock.getElapsedTime();

  // Update rotation on x axis
  mesh.rotation.x = elapsedtime * (Math.PI * 2);

  // Renderer
  renderer.render(scene, camera); // Draw what inside the camera (the scene captured)

  // RequestAnimationFrame
  window.requestAnimationFrame(animate);
};
animate();

-------------------------------------------------------

- Each (vertix) has many attibutes {position - UV - Normal - ...}
- segments => Controll the number of triangles forming the shape (Height segments - width segments - depth segments)
  (Because each geometric shape has vertices and by connecting these vertices by lines for triangles and these triangles beside each others finally form the shape)

- UV Attribute => Explain how the texture will look like on the geometry
                  (video 7.6 , min 10)

- BufferGeometry => Is lighter on GPU (Has fewer attributes)
-------------------------------------------------------

- Texture => It's like a wrapper surrounding the mesh to give it a shape
             (Sphere + texture of basket ball (like a paper printed on it the basket ball skin) => Basketball)

- Texture type => {
                    Color texture (only a color) ,
                    Displacement texture (the vertices of the shape move according to the color of the texture)
                                         (Like the mountains on the each mesh , they are going up on 3d images)
                    Normal texture (Same as color but needs lights)
                    bump texture (reflict light in different proportions, the light parts reflicts light more than the drker parts)
                  }

-------------------------------------------------------

- Mesh types :-
---------------
1) MeshBasicMaterial => Do not need light to see it.
2) MeshDepthMaterial => The mesh will be gray, as the mesh get closer to the camera as it gets more white, as it get far from the camera as black it get.
3) MeshNormalMaterial => Color the outside surface of the mesh based on the outside surface near to the lighting, and the surface not infront of the camera be black until the lightinh came to it to show it's color.
4) MeshMatcapAterial => Do not nedd light, it Show the gradient of a certain color on the whole mesh based on it's normal distribution of the mesh, and the color based on the color that the light is pointing on.
...   

-------------------------------------------------------

- PointsMaterial => Converts the mesh into particls
                    It's class => ( Points ) 
                    *** A square will be drawn on each vertix of the shape. *** These are the particls appear.

- The (snow effect) is making particlas of a square shape and the color them and then add a texture to these particles and the last animate them all.
  
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
